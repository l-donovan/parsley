# "input" is the name of the top-level rule
# A plus sign indicates a OneOrMore expression
input: item+

# A pipe indicates an Or expression
item: expression | comment

# Rules are implicitly wrapped in groups, so `rule: content1 content2` is treated as `rule: (content1 content2)`
# Angle brackets represent a union type
expression: <list map literal tagged expanding reference transformer> comment?

# Regular expressions are indicated with forward slashes /like so/
comment: /\/\/.+\n/

# String literals, denoted by double quotes, are discarded by default
# An asterisk indicates a ZeroOrMore expression
list: "[" item* "]"
pair: name expression
map: "{" <pair expanding>* "}"
name: /[a-zA-Z][\w_]*/
integer: /-?\d+/
float: /-?\d*\.\d+/
boolean: /true|false/
string: /"[^"\n]+"/
null: "null"
literal: <float integer boolean string null>
tagged: "#" name expression
expanding: "*" expression
reference: "&" name
transformer: <plain_transformer mapped_transformer>
plain_transformer: name expression
mapped_transformer: "@" plain_transformer
